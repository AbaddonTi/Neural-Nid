name: Deploy Workflow

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'statistics/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      ID_RSA_PUB: ${{ secrets.ID_RSA_PUB }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH and Deploy to Servers
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVERS_IPS: ${{ secrets.SERVERS_IPS }}
        run: |
          rsync -a --delete ./ /tmp/snapshot/
          tar -czf deploy.tar.gz -C /tmp/snapshot .
          export DEPLOY_KEY=$DEPLOY_KEY
          export ID_RSA_PUB=$ID_RSA_PUB
          IFS=',' read -ra ADDR <<< "$SERVERS_IPS"
          for IP in "${ADDR[@]}"; do
            (
              echo "Connecting to $IP"
              sshpass -p "${SERVER_PASSWORD}" scp -o StrictHostKeyChecking=no deploy.tar.gz ${SERVER_USER}@${IP}:/root/
              sshpass -p "${SERVER_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${IP} "

                echo 'Checking for available updates'

                NEED_UPDATE=\$(sudo apt-get upgrade -u -s | grep -P '^\\d+ upgraded' | cut -d ' ' -f 1)
                if [[ \"\$NEED_UPDATE\" != '0' ]]; then
                  echo 'Updating and upgrading packages as updates are available'
                  sudo apt-get update && sudo apt-get upgrade -y
                else
                  echo 'No updates are necessary at the moment'
                fi
                

                echo 'Checking if Git is installed'
                if ! type git >/dev/null 2>&1; then
                  echo 'Installing Git'
                  sudo apt-get install git -y
                fi
                

                echo 'Checking if Fail2ban is installed'
                if ! type fail2ban-client >/dev/null 2>&1; then
                  echo 'Installing Fail2ban'
                  sudo apt-get install fail2ban -y
                  sudo systemctl enable fail2ban
                  sudo systemctl start fail2ban
                fi
                

                echo 'Checking if Docker is installed'
                if ! type docker >/dev/null 2>&1; then
                  echo 'Installing Docker'
                  curl -fsSL https://get.docker.com -o get-docker.sh
                  sudo sh get-docker.sh
                  sudo usermod -aG docker $SERVER_USER
                fi

                echo 'Checking for Docker network'
                if ! docker network ls | grep -q my-network; then
                  echo 'Creating Docker network'
                  docker network create my-network || true
                fi
                
                
                echo "Setting up GitHub SSH keys"
                if [ ! -f /root/.ssh/id_rsa ] || [ ! -s /root/.ssh/id_rsa ]; then
                  echo "Private key not found or empty, creating or replacing it"
                  mkdir -p /root/.ssh
                  echo '$DEPLOY_KEY' > /root/.ssh/id_rsa
                  chmod 600 /root/.ssh/id_rsa
                fi
                
                if [ ! -f /root/.ssh/id_rsa.pub ] || [ ! -s /root/.ssh/id_rsa.pub ]; then
                  echo "Public key not found or empty, creating or replacing it"
                  echo '$ID_RSA_PUB' > /root/.ssh/id_rsa.pub
                  chmod 644 /root/.ssh/id_rsa.pub
                fi


                # Adding GitHub to known hosts if not already added
                if ! grep -q "github.com" /root/.ssh/known_hosts; then
                  echo "Adding GitHub to known hosts"
                  ssh-keyscan github.com >> /root/.ssh/known_hosts
                fi
                
                # Configuring SSH to not perform strict host key checking for GitHub
                if ! grep -q "Host github.com" /root/.ssh/config; then
                  echo "Adding SSH config for GitHub"
                  echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> /root/.ssh/config
                fi

                
                echo "Checking and setting Git configuration"
                if [ -z "$(git config --global user.name)" ]; then
                  echo "Configuring Git user name"
                  git config --global user.name "AbaddonTi"
                fi
                if [ -z "$(git config --global user.email)" ]; then
                  echo "Configuring Git user email"
                  git config --global user.email "ctekta@gmail.com"
                fi

                echo "Checking and setting Git repositorie"
                cd /root
                if [ -d Neural-Nid ]; then
                  echo 'Repository exists, pulling updates...'
                  cd Neural-Nid
                  git fetch origin
                  git reset --hard origin/master
                  if [ $? -ne 0 ]; then
                    echo 'Failed to reset repository. Exiting...'
                  fi
                else
                  echo 'Repository does not exist, unpacking archive...'
                  mkdir Neural-Nid
                  cd Neural-Nid
                  tar -xzf ../deploy.tar.gz
                  if [ $? -ne 0 ]; then
                    echo 'Failed to unpack archive. Exiting...'
                  fi
                fi
                rm ../deploy.tar.gz
                if [ $? -ne 0 ]; then
                  echo 'Failed to remove archive. Exiting...'
                fi
                
                
                # Build and run backend
                cd ~/Neural-Nid/backend
                docker stop neural-nid-backend || true
                docker rm neural-nid-backend || true
                docker build -t neural-nid-backend .
                docker run -d --restart always --name neural-nid-backend --network=my-network -p 5500:5500 \
                  -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
                  -e STATISTICS_SERVICE_URL=http://statistics-collector:5600/log \
                  neural-nid-backend
                
                # Build and run statistics service
                cd ~/Neural-Nid/statistics
                docker stop statistics-collector || true
                docker rm statistics-collector || true
                docker build -t statistics-collector .
                docker run -d --restart always --name statistics-collector --network=my-network -p 5600:5600 \
                  -v ~/Neural-Nid/logs:/app/logs \
                  statistics-collector
                
                # Build and run frontend
                cd ~/Neural-Nid/frontend
                docker stop neural-nid-frontend || true
                docker rm neural-nid-frontend || true
                docker build -t neural-nid-frontend .
                docker run -d --restart always --network=my-network -p 8080:80 --name neural-nid-frontend neural-nid-frontend
                
              "
            ) &
          done
          wait
