name: Main CI/CD Workflow

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'statistics/**'
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy New Server"]
    types:
      - completed

jobs:
  check-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Download Deployment Artifact
        uses: actions/download-artifact@v2
        with:
          name: deployment-status
        continue-on-error: true

      - name: Check Deployment Artifact
        id: check-artifact
        run: |
          if [ -f deployment-status/deployment_status.txt ]; then
            CONTENT=$(cat deployment-status/deployment_status.txt)
            echo "Deployment status: $CONTENT"
            if [[ "$CONTENT" == "failure" ]]; then
              echo "Deployment failed. Stopping further actions."
              exit 1
            fi
          else
            echo "No deployment artifact found. Assuming server is new or needs redeployment."
            echo "new_server=true" >> $GITHUB_ENV
          fi

  prepare-and-deploy:
    needs: check-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup job for each server
        run: |
          SERVERS_IPS="${{ secrets.SERVERS_IPS }}"
          IFS=',' read -ra ADDR <<< "$SERVERS_IPS"
          echo "${{ secrets.SERVER_PASSWORD }}" > sshpass.txt
          for SERVER_IP in "${ADDR[@]}"; do
            echo "server_ip=$SERVER_IP" >> $GITHUB_ENV
            echo "Attempting to connect to $SERVER_IP with user ${{ secrets.SERVER_USER }}"
            sshpass -f sshpass.txt ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_IP "echo 'Connected'"
            echo "SSH command completed with status $?"
          done
          rm -f sshpass.txt # Clean up
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}

      - name: Dispatch Deployment Workflows
        if: env.new_server == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy New Server
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: master
          inputs: '{"server_ip": "${{ env.server_ip }}"}'

      - name: Check Paths and Deploy
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q 'backend/'; then
            echo "Changes detected in backend. Dispatching backend deployment."
            echo "deploy_backend=true" >> $GITHUB_ENV
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q 'frontend/'; then
            echo "Changes detected in frontend. Dispatching frontend deployment."
            echo "deploy_frontend=true" >> $GITHUB_ENV
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q 'statistics/'; then
            echo "Changes detected in statistics. Dispatching statistics deployment."
            echo "deploy_statistics=true" >> $GITHUB_ENV

      - name: Deploy Components
        if: ${{ env.deploy_backend }} || ${{ env.deploy_frontend }} || ${{ env.deploy_statistics }}
        run: |
          if [ "${{ env.deploy_statistics }}" == "true" ]; then
            cd Neural-Nid/statistics
            docker stop statistics-collector || true
            docker rm statistics-collector || true
            docker build -t statistics-collector .
            docker run -d --restart always --name statistics-collector --network=my-network -p 5600:5600 \
              -v ~/Neural-Nid/logs:/app/logs \
              statistics-collector
          fi
          if [ "${{ env.deploy_frontend }}" == "true" ]; then
            cd Neural-Nid/frontend
            docker stop neural-nid-frontend || true
            docker rm neural-nid-frontend || true
            docker build -t neural-nid-frontend .
            docker run -d --restart always --network=my-network -p 8080:80 --name neural-nid-frontend neural-nid-frontend
          fi
          if [ "${{ env.deploy_backend }}" == "true" ]; then
            cd Neural-Nid/backend
            docker stop neural-nid-backend || true
            docker rm neural-nid-backend || true
            docker build -t neural-nid-backend .
            docker run -d --restart always --name neural-nid-backend --network=my-network -p 5500:5500 \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e STATISTICS_SERVICE_URL=http://statistics-collector:5600/log \
              neural-nid-backend
