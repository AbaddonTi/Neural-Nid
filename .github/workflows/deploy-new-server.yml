name: Deploy New Server

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'IP Address of the Server'
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ github.event.inputs.server_ip }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}

          script: |
            set -euxo pipefail # Enable detailed debugging

            # Обновить все пакеты и зависимости
            echo "Updating and upgrading packages"
            sudo apt-get update && sudo apt-get upgrade -y 
            
            # Установка Git если не установлен
            echo "Checking if Git is installed"
            if ! type git >/dev/null 2>&1; then
              echo "Installing Git"
              sudo apt-get install git -y 
            fi

            # Установка Docker
            echo "Checking if Docker is installed"
            if ! type docker >/dev/null 2>&1; then
              echo "Installing Docker"
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh || exit 1
              sudo usermod -aG docker ${{ secrets.SERVER_USER }} 
            fi

            # Установка Docker Compose
            echo "Checking if Docker Compose is installed"
            if [ ! -f /usr/local/bin/docker-compose ]; then
              echo "Installing Docker Compose"
              COMPOSE_URL=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep docker-compose-$(uname -s)-$(uname -m) | cut -d '"' -f 4)
              sudo curl -L $COMPOSE_URL -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose 
            fi


            # Проверка и создание Docker сети
            echo "Checking for Docker network"
            if ! docker network ls | grep -q my-network; then
              echo "Creating Docker network"
              docker network create my-network || true
            fi

            # Настройка ключей GitHub
            echo "Setting up GitHub keys"
            if [ ! -f /root/.ssh/id_rsa ]; then
              mkdir -p /root/.ssh
              echo "${{ secrets.DEPLOY_KEY }}" > /root/.ssh/id_rsa
              chmod 600 /root/.ssh/id_rsa 
              ssh-keyscan github.com >> /root/.ssh/known_hosts
              echo "Host github.com\n\tStrictHostKeyChecking no\n" >> /root/.ssh/config
            fi

            # Настройка Git
            echo "Configuring Git"
            git config --global user.name "AbaddonTi" 
            git config --global user.email "ctekta@gmail.com" 

            # Клонирование или обновление репозитория
            echo "Cloning or updating repository"
            REPO_PATH="/root/Neural-Nid"
            if [ ! -d "$REPO_PATH" ]; then
              git clone git@github.com:AbaddonTi/Neural-Nid.git $REPO_PATH || exit 1
            else
              cd $REPO_PATH
              git pull
            fi

            # Установка SSL сертификата
            echo "Installing SSL certificate"
            if ! [ -f /etc/letsencrypt/live/neuronalnid.com/fullchain.pem ]; then
              sudo apt-get install certbot python3-certbot-nginx -y 
              sudo certbot --nginx -d neuronalnid.com -d www.neuronalnid.com
            fi

            # Обновление конфигурации nginx
            echo "Updating nginx configuration"
            if [ -f /root/Neural-Nid/backup/nginx/default ]; then
              sudo cp /root/Neural-Nid/backup/nginx/default /etc/nginx/sites-available/default 
              sudo systemctl reload nginx 
            fi

            echo "Server setup complete successfully"

      # Create a success indicator file
      - name: Create success indicator
        run: |
          echo "success" > /tmp/deployment_status.txt
        if: success()

      # Create a failure indicator file
      - name: Create failure indicator
        run: |
          echo "failure" > /tmp/deployment_status.txt
        if: failure()

      # Upload the deployment status as an artifact
      - name: Upload deployment status artifact
        uses: actions/upload-artifact@v2
        with:
          name: deployment-status
          path: /tmp/deployment_status.txt
